#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <linux/capability.h>
#include <sys/syscall.h>

/* V3 added in Linux 2.6.26 */
#define _LINUX_CAPABILITY_VERSION_3  0x20080522
#define _LINUX_CAPABILITY_U32S_3     2

typedef struct __user_cap_header_struct {
              __u32 version;
              int pid;
} ;//*cap_user_header_t;

typedef struct __user_cap_data_struct {
              __u32 effective;
              __u32 permitted;
              __u32 inheritable;
} ;//*cap_user_data_t;

static __attribute__ ((noinline)) unsigned long long rdtsc(void)
{
    unsigned hi, lo;
    asm volatile ("rdtsc" : "=a"(lo), "=d"(hi));
    return ((unsigned long long) lo | (unsigned long long) hi << 32);
}

int main (void)
{

    __user_cap_header_struct hdr;// = new __user_cap_header_struct;
    __user_cap_data_struct data; // = new __user_cap_data_struct;
    hdr.pid = getpid();
    hdr.version = _LINUX_CAPABILITY_VERSION;
    data.effective &= ~CAP_TO_MASK(CAP_IPC_LOCK);
    data.permitted &= ~CAP_TO_MASK(CAP_IPC_LOCK);
    data.inheritable = 0;
    if (capset(hdr, data) < 0)
        printf("capset failed: %m");

    return 0;

    int ret;

    asm volatile (
            "movq $0xabababababababab, %%rax; \n\t"
            "vmcall; \n\t"
            :::"%rax");

    sleep(0x5);

    // This is to issue an onsite analysis request
    asm volatile("movq $0xcdcdcdcd, %%rax; \n\t"
            "leaq 0x5(%%rip), %%rdi; \n\t"
            "movq $2, %%rdi; \n\t"
            "cmp $1, %%rdi; \n\t"
            "vmcall; \n\t"
            :::"%rax", "%rdi");

 //getpriority
    asm volatile("movq $140, %%rax; \n\t"
            "movq $0, %%rdi; \n\t"
            "movq $0, %%rsi; \n\t"
            "syscall; \n\t"
            "movq %%rax, %0; \n\t"
            :"=m"(ret)::"%rax","%rdi","%rsi");
    ret = ret - 3;
	    //  unsigned long t0 = rdtsc(); 
    asm volatile("movq $141, %%rax; \n\t"
            "movq $0, %%rdi; \n\t"
            "movq $0, %%rsi; \n\t"
            "movq %1, %%rdx; \n\t"
            "syscall; \n\t"
            "movq %%rax, %0; \n\t"
            :"=m"(ret):"m"(ret):"%rax","%rdi","%rsi","%rdx");
  //unsigned long t1 = rdtsc();
    
    printf ("ret of setpriority: %d. \n", ret);
    //printf ("ret of setpriority: %d. cy: %lu \n", ret, t1-t0);
    return 1;
}
